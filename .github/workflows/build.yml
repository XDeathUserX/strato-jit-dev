# A workflow to verify the build on every push to the master branch
name: Build

on:
  push: 
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Git Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Restore CCache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          max-size: 3Gi

      - name: Restore Gradle Cache
        uses: actions/cache@v4
        with:
          path: ~/.gradle/
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/build.gradle') }}-${{ hashFiles('app/**/*.xml') }}-${{ hashFiles('app/**.kt', 'app/**.java') }}
          restore-keys: |
            ${{ runner.os }}-gradle-${{ hashFiles('**/build.gradle') }}-${{ hashFiles('app/**/*.xml') }}-
            ${{ runner.os }}-gradle-${{ hashFiles('**/build.gradle') }}-
            ${{ runner.os }}-gradle-

      - name: Install Java 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin' # Temurin should come pre-installed on GitHub-hosted runners
          java-version: '17'

      - name: Install Ninja Build
        run: |
          sudo apt-get install -y ninja-build
          ln -s /usr/bin/ninja .

      - name: Decode Keystore
        env:
          KEYSTORE_ENCODED: ${{ secrets.KEYSTORE }}
        run: echo $KEYSTORE_ENCODED | base64 --decode > "/home/runner/keystore.jks"

      - name: Android Assemble
        env:
          SIGNING_STORE_PATH: "/home/runner/keystore.jks"
          SIGNING_STORE_PASSWORD: ${{ secrets.SIGNING_STORE_PASSWORD }}
          SIGNING_KEY_ALIAS: ${{ secrets.SIGNING_KEY_ALIAS }}
          SIGNING_KEY_PASSWORD: ${{ secrets.SIGNING_KEY_PASSWORD }}
          CMAKE_C_COMPILER_LAUNCHER: "ccache"
          CMAKE_CXX_COMPILER_LAUNCHER: "ccache"
          CCACHE_COMPILERCHECK: "string:${{ env.NDK_VERSION }}"
        run: ./gradlew --stacktrace --configuration-cache --build-cache --parallel --configure-on-demand assembleMainlineRelease assembleDevReldebug

      - name: Rename APKs (Signed)
        if: env.IS_BUILD_SIGNED == 'true' && env.UPLOAD_ARTIFACTS == 'true'
        run: |
          mv app/build/outputs/apk/full/reldebug/app-full-reldebug.apk strato-$GITHUB_RUN_NUMBER-reldebug.zip
          mv app/build/outputs/apk/full/release/app-full-release.apk strato-$GITHUB_RUN_NUMBER-release.zip

      - name: Upload Signed Debug APK
        if: env.IS_BUILD_SIGNED == 'true' && env.UPLOAD_ARTIFACTS == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: strato-${{ github.run_number }}-reldebug.zip
          path: strato-${{ github.run_number }}-reldebug.zip

      - name: Upload Signed Release APK
        if: env.IS_BUILD_SIGNED == 'true' && env.UPLOAD_ARTIFACTS == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: strato-${{ github.run_number }}-release.zip
          path: strato-${{ github.run_number }}-release.zip

      - name: Rename APKs (Unsigned)
        if: env.IS_BUILD_SIGNED == 'false' && env.UPLOAD_ARTIFACTS == 'true'
        run: |
          mv app/build/outputs/apk/full/reldebug/app-full-reldebug.apk strato-$GITHUB_RUN_NUMBER-unsigned-reldebug.zip
          mv app/build/outputs/apk/full/release/app-full-release.apk strato-$GITHUB_RUN_NUMBER-unsigned-release.zip

      - name: Upload Unsigned Debug APK
        if: env.IS_BUILD_SIGNED == 'false' && env.UPLOAD_ARTIFACTS == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: strato-${{ github.run_number }}-unsigned-reldebug.zip
          path: strato-${{ github.run_number }}-unsigned-reldebug.zip

      - name: Upload Unsigned Release APK
        if: env.IS_BUILD_SIGNED == 'false' && env.UPLOAD_ARTIFACTS == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: strato-${{ github.run_number }}-unsigned-release.zip
          path: strato-${{ github.run_number }}-unsigned-release.zip
